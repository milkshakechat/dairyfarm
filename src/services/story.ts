import {
  BucketFolderSlug,
  FirestoreCollection,
  ImageResizeOption,
  StoryID,
  Story_Firestore,
  UserID,
  getCompressedMediaUrl,
  StoryAttachmentType as TSStoryAttachmentType,
  StoryAttachmentID,
} from "@milkshakechat/helpers";
import { createFirestoreDoc, createFirestoreTimestamp } from "./firestore";
import { v4 as uuidv4 } from "uuid";
import { StoryAttachmentType } from "@/graphql/types/resolvers-types";

export const getVideoThumbnail = (mediaUrl: string) => "";
export const getVideoStream = (mediaUrl: string) => "";
export const getImageCompressed = (
  mediaUrl: string,
  option: ImageResizeOption
) => {
  return getCompressedMediaUrl(mediaUrl, BucketFolderSlug.story_image, option);
};

interface CreateStoryFirestoreArgs {
  mediaUrl?: string;
  mediaType?: StoryAttachmentType;
  userID: UserID;
  caption?: string;
}
export const createStoryFirestore = async ({
  mediaUrl,
  mediaType,
  userID,
  caption,
}: CreateStoryFirestoreArgs) => {
  const isVideo = mediaType === StoryAttachmentType.Video;
  const now = new Date();
  const defaultExpiry24Hours = new Date(now.getTime() + 24 * 60 * 60 * 1000);
  const storyID = uuidv4() as StoryID;
  const attachmentID = uuidv4() as StoryAttachmentID;
  const attachment = {
    id: attachmentID, // index
    storyID: storyID, // index
    userID: userID,
    type: mediaType as unknown as TSStoryAttachmentType, // image or video
    url: mediaUrl || "", // standard definition url
    thumbnail: !mediaUrl
      ? ""
      : isVideo
      ? getVideoThumbnail(mediaUrl)
      : getImageCompressed(mediaUrl, ImageResizeOption.thumbnail),
    stream: !mediaUrl ? "" : isVideo ? getVideoStream(mediaUrl) : undefined,
    altText: caption || "",
  };
  const storyData = {
    id: storyID,
    userID,
    // story
    caption: caption || "",
    attachments: [attachment],
    // invitePreview will allow this to appear in invite previews (dynamically retrieved)
    // since invites can generated by AudiencePage.generateInvite()
    previewable: false,
    // pinned will allow story to appear at top of profile (also dynamically retrieved)
    pinned: false,
    // showcase will allow story to appear in timeline (also dynamically retrieved)
    showcase: false,
    // thumbnails
    thumbnail: !mediaUrl
      ? ""
      : isVideo
      ? getVideoThumbnail(mediaUrl)
      : getImageCompressed(mediaUrl, ImageResizeOption.thumbnail),
    showcaseThumbnail: !mediaUrl
      ? ""
      : isVideo
      ? getVideoThumbnail(mediaUrl)
      : getImageCompressed(mediaUrl, ImageResizeOption.compressed),
    // visibility
    visibleAudienceGroups: [],
    visibleFriends: [],
    visibleHashtags: [],
    // negative visibility, used for audience group exclusion
    hiddenUsers: [],
    // friends mentioned
    mentionedUsers: [],
    // wishlist mentioned
    mentionedWishlists: [],
    // duration
    expiresAt: createFirestoreTimestamp(defaultExpiry24Hours),
    // location
    // location?: StoryLocation;
    // outbound link to internet (call to action)
    // outboundLink?: string;
    // metadata
    createdAt: createFirestoreTimestamp(),
    deleted: false,
  };
  console.log(`storyData`, storyData);
  const story = await createFirestoreDoc<StoryID, Story_Firestore>({
    id: storyID,
    data: storyData,
    collection: FirestoreCollection.STORIES,
  });
  return story;
};
