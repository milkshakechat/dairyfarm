import {
  BucketFolderSlug,
  FirestoreCollection,
  ImageResizeOption,
  StoryID,
  Story_Firestore,
  UserID,
  StoryAttachmentType as TSStoryAttachmentType,
  StoryAttachmentID,
  getCompressedStoryImageUrl,
} from "@milkshakechat/helpers";
import { createFirestoreDoc, createFirestoreTimestamp } from "./firestore";
import { v4 as uuidv4 } from "uuid";
import { StoryAttachmentType } from "@/graphql/types/resolvers-types";
import config from "@/config.env";
import {
  predictVideoThumbnailRoute,
  predictVideoTranscodedManifestRoute,
  predictVideoTranscodedSDHDRoute,
} from "./video-transcoder";

export const getImageStoryCompressed = ({
  storyID,
  userID,
  assetID,
  size,
}: {
  storyID: StoryID;
  userID: UserID;
  assetID: string;
  size: ImageResizeOption;
}) => {
  return getCompressedStoryImageUrl({
    storyID,
    userID,
    size,
    assetID,
    bucketName: config.FIREBASE.storageBucket,
  });
};

interface CreateStoryFirestoreArgs {
  mediaUrl?: string;
  mediaType?: StoryAttachmentType;
  userID: UserID;
  caption?: string;
  assetID?: string;
}
export const createStoryFirestore = async ({
  mediaUrl,
  mediaType,
  userID,
  caption,
  assetID,
}: CreateStoryFirestoreArgs) => {
  console.log(`mediaType = ${mediaType}`);
  console.log(`mediaUrl`, mediaUrl);
  const isVideo = mediaType === StoryAttachmentType.Video;
  const now = new Date();
  const defaultExpiry24Hours = new Date(now.getTime() + 24 * 60 * 60 * 1000);
  const storyID = uuidv4() as StoryID;
  const attachmentID = uuidv4() as StoryAttachmentID;
  const attachment = {
    id: attachmentID, // index
    storyID: storyID, // index
    userID: userID,
    type: mediaType as unknown as TSStoryAttachmentType, // image or video
    url: !mediaUrl
      ? ""
      : isVideo
      ? predictVideoTranscodedSDHDRoute(mediaUrl || "").sd
      : getImageStoryCompressed({
          storyID: storyID,
          userID,
          assetID: assetID || "",
          size: ImageResizeOption.compressed,
        }), // standard definition url
    thumbnail: !mediaUrl
      ? ""
      : isVideo
      ? predictVideoThumbnailRoute({
          userID,
          assetID: assetID || "",
        })
      : getImageStoryCompressed({
          storyID: storyID,
          userID,
          assetID: assetID || "",
          size: ImageResizeOption.thumbnail,
        }),
    stream: !mediaUrl
      ? ""
      : isVideo
      ? predictVideoTranscodedManifestRoute(mediaUrl)
      : undefined,
    altText: caption || "",
  };
  const storyData = {
    id: storyID,
    userID,
    // story
    caption: caption || "",
    attachments: [attachment],
    // invitePreview will allow this to appear in invite previews (dynamically retrieved)
    // since invites can generated by AudiencePage.generateInvite()
    previewable: false,
    // pinned will allow story to appear at top of profile (also dynamically retrieved)
    pinned: false,
    // showcase will allow story to appear in timeline (also dynamically retrieved)
    showcase: false,
    // thumbnails
    thumbnail: !mediaUrl
      ? ""
      : isVideo
      ? predictVideoThumbnailRoute({
          userID,
          assetID: assetID || "",
        })
      : getImageStoryCompressed({
          storyID: storyID,
          userID,
          assetID: assetID || "",
          size: ImageResizeOption.thumbnail,
        }),
    showcaseThumbnail: !mediaUrl
      ? ""
      : isVideo
      ? predictVideoThumbnailRoute({
          userID,
          assetID: assetID || "",
          size: ImageResizeOption.compressed,
        })
      : getImageStoryCompressed({
          storyID: storyID,
          userID,
          assetID: assetID || "",
          size: ImageResizeOption.thumbnail,
        }),
    // visibility
    visibleAudienceGroups: [],
    visibleFriends: [],
    visibleHashtags: [],
    // negative visibility, used for audience group exclusion
    hiddenUsers: [],
    // friends mentioned
    mentionedUsers: [],
    // wishlist mentioned
    mentionedWishlists: [],
    // duration
    expiresAt: createFirestoreTimestamp(defaultExpiry24Hours),
    // location
    // location?: StoryLocation;
    // outbound link to internet (call to action)
    // outboundLink?: string;
    // metadata
    processingComplete: isVideo ? false : true,
    createdAt: createFirestoreTimestamp(),
    deleted: false,
  };
  console.log(`storyData`, storyData);
  const story = await createFirestoreDoc<StoryID, Story_Firestore>({
    id: storyID,
    data: storyData,
    collection: FirestoreCollection.STORIES,
  });
  return story;
};

// received
// https://firebasestorage.googleapis.com/v0/b/milkshake-dev-faf77.appspot.com/o/users/m2fb0WWHOBesIAsevvCeNfv1w2Z2/story/VIDEO/f7f2533c-6acb-4e70-bde4-cdc2b8d36d1f/resized-media/thumbnail-f7f2533c-6acb-4e70-bde4-cdc2b8d36d1f_200x200.jpeg?alt=media

// actual
// https://firebasestorage.googleapis.com/v0/b/milkshake-dev-faf77.appspot.com/o/users%2Fm2fb0WWHOBesIAsevvCeNfv1w2Z2%2Fstory%2FVIDEO%2Ff7f2533c-6acb-4e70-bde4-cdc2b8d36d1f%2Fresized-media%2Fthumbnail-f7f2533c-6acb-4e70-bde4-cdc2b8d36d1f_200x200.jpeg?alt=media&token=e645439e-d3a4-4eb3-8f73-7b7496a307d1
