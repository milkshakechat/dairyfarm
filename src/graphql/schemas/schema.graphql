
enum PrivacyModeEnum {
  public
  private
  hidden
}

enum LanguageEnum {
  english
  spanish
  chinese
  arabic
  thai
  vietnamese
}

type User {
  id: UserID!
  email: String!
  username: String!
  phone: String
  displayName: String!
  bio: String!
  avatar: String!
  link: String!
  disabled: Boolean!
  isPaidChat: Boolean!
  isCreator: Boolean!
  createdAt: DateString!
  privacyMode: PrivacyModeEnum!
  themeColor: HexColorCode!
  language: LanguageEnum!
}

# --- getMyProfile
type GetMyProfileResponseSuccess {
  user: User!
}
union GetMyProfileResponse =
    GetMyProfileResponseSuccess
  | ResponseError

# --- checkUsernameAvailable
input CheckUsernameAvailableInput {
  username: String!
}
type CheckUsernameAvailableResponseSuccess {
  isAvailable: Boolean!
}
union CheckUsernameAvailableResponse =
    CheckUsernameAvailableResponseSuccess
  | ResponseError

# --- Queries
type Query {
  getMyProfile: GetMyProfileResponse!
  checkUsernameAvailable(input: CheckUsernameAvailableInput!): CheckUsernameAvailableResponse!
}

# --- modifyProfile
input ModifyProfileInput {
  displayName: String
  username: String
  bio: String
  avatar: String
  link: String
  privacyMode: PrivacyModeEnum
  themeColor: HexColorCode
  language: LanguageEnum
}
type ModifyProfileResponseSuccess {
  user: User!
}
union ModifyProfileResponse =
    ModifyProfileResponseSuccess
  | ResponseError

# --- Mutations
type Mutation {
  modifyProfile(input: ModifyProfileInput!): ModifyProfileResponse!
  # createGroupChat(input: CreateGroupChatInput!): CreateGroupChatResponse!
}


# --- template
# input TemplateInput {
#   userID: UserID!
# }
# type TemplateResponseSuccess {
#   statusCode: String!
# }
# union TemplateResponse =
#     SendFriendRequestResponseSuccess
#   | ResponseError
