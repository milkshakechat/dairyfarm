
enum PrivacyModeEnum {
  public
  private
  hidden
}

enum LanguageEnum {
  english
  spanish
  chinese
  arabic
  thai
  vietnamese
  japanese
  korean
}

type User {
  id: UserID!
  email: String!
  username: String!
  phone: String
  displayName: String!
  bio: String!
  avatar: String!
  link: String!
  disabled: Boolean!
  isPaidChat: Boolean!
  isCreator: Boolean!
  createdAt: DateString!
  privacyMode: PrivacyModeEnum!
  themeColor: HexColorCode!
  language: LanguageEnum!
}

# --- getMyProfile
type GetMyProfileResponseSuccess {
  user: User!
}
union GetMyProfileResponse =
    GetMyProfileResponseSuccess
  | ResponseError

# --- checkUsernameAvailable
input CheckUsernameAvailableInput {
  username: String!
}
type CheckUsernameAvailableResponseSuccess {
  isAvailable: Boolean!
}
union CheckUsernameAvailableResponse =
    CheckUsernameAvailableResponseSuccess
  | ResponseError


# --- viewPublicProfile
input ViewPublicProfileInput {
  username: String!
}
type ViewPublicProfileResponseSuccess {
  id: UserID!
  username: String!
  avatar: String
}
union ViewPublicProfileResponse =
    ViewPublicProfileResponseSuccess
  | ResponseError


# --- listContacts
type Contact {
  friendID: UserID!
  username: String
  displayName: String!
  avatar: String
  status: FriendshipStatus
}
type ListContactsResponseSuccess {
  contacts: [Contact!]!
  # globalDirectory is only for development
  globalDirectory: [Contact!]!
}
union ListContactsResponse =
    ListContactsResponseSuccess
  | ResponseError

# --- Queries
type Query {
  getMyProfile: GetMyProfileResponse!
  checkUsernameAvailable(input: CheckUsernameAvailableInput!): CheckUsernameAvailableResponse!
  viewPublicProfile(
    input: ViewPublicProfileInput!
  ): ViewPublicProfileResponse!
  listContacts: ListContactsResponse!
}

# --- modifyProfile
input ModifyProfileInput {
  displayName: String
  username: String
  bio: String
  avatar: String
  link: String
  privacyMode: PrivacyModeEnum
  themeColor: HexColorCode
  language: LanguageEnum
}
type ModifyProfileResponseSuccess {
  user: User!
}
union ModifyProfileResponse =
    ModifyProfileResponseSuccess
  | ResponseError

# --- update push token
input UpdatePushTokenInput {
  token: PushToken!
  active: Boolean!
  title: String
}
type UpdatePushTokenResponseSuccess {
  status: String!
}
union UpdatePushTokenResponse =
    UpdatePushTokenResponseSuccess
  | ResponseError


# --- send friend request
enum FriendshipStatus {
  SENT_REQUEST
  GOT_REQUEST
  ACCEPTED
  DECLINED
  BLOCKED
  NONE
}
input SendFriendRequestInput {
  recipientID: UserID!
  note: String
  utmAttribution: String
}
type SendFriendRequestResponseSuccess {
  status: FriendshipStatus!
}
union SendFriendRequestResponse =
    SendFriendRequestResponseSuccess
  | ResponseError

# --- Mutations
type Mutation {
  modifyProfile(input: ModifyProfileInput!): ModifyProfileResponse!
  updatePushToken(input: UpdatePushTokenInput!): UpdatePushTokenResponse!
  sendFriendRequest(input: SendFriendRequestInput!): SendFriendRequestResponse!
  # createGroupChat(input: CreateGroupChatInput!): CreateGroupChatResponse!
}


# --- template
# input TemplateInput {
#   userID: UserID!
# }
# type TemplateResponseSuccess {
#   statusCode: String!
# }
# union TemplateResponse =
#     SendFriendRequestResponseSuccess
#   | ResponseError
