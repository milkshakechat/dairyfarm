
enum PrivacyModeEnum {
  public
  private
  hidden
}

enum LanguageEnum {
  english
  spanish
  chinese
  arabic
  thai
  vietnamese
  japanese
  korean
}

enum GenderEnum {
  male
  female
  other
  unknown
}

type User {
  id: UserID!
  email: String!
  username: String!
  phone: String
  displayName: String!
  bio: String!
  avatar: String!
  link: String!
  disabled: Boolean!
  isPaidChat: Boolean!
  isCreator: Boolean!
  createdAt: DateString!
  privacyMode: PrivacyModeEnum!
  themeColor: HexColorCode!
  language: LanguageEnum!
  sendBirdAccessToken: String
  stories: [Story!]!
  gender: GenderEnum!
  interestedIn: [GenderEnum!]!
  tradingWallet: WalletAliasID
  escrowWallet: WalletAliasID
  defaultPaymentMethodID: String
}

# --- getMyProfile
type GetMyProfileResponseSuccess {
  user: User!
}
union GetMyProfileResponse =
    GetMyProfileResponseSuccess
  | ResponseError

# --- checkUsernameAvailable
input CheckUsernameAvailableInput {
  username: String!
}
type CheckUsernameAvailableResponseSuccess {
  isAvailable: Boolean!
}
union CheckUsernameAvailableResponse =
    CheckUsernameAvailableResponseSuccess
  | ResponseError


# --- viewPublicProfile
input ViewPublicProfileInput {
  username: String
  userID: UserID
}
type ViewPublicProfileResponseSuccess {
  id: UserID!
  username: String!
  avatar: String
  displayName: String
  bio: String
  stories: [Story!]!
  privacyMode: PrivacyModeEnum!
}
union ViewPublicProfileResponse =
    ViewPublicProfileResponseSuccess
  | ResponseError


# --- listContacts
input ListContactsInput {
  nonce: String
}
type Contact {
  friendID: UserID!
  username: String
  displayName: String!
  avatar: String
  status: FriendshipStatus
}
type ListContactsResponseSuccess {
  contacts: [Contact!]!
}
union ListContactsResponse =
    ListContactsResponseSuccess
  | ResponseError

# --- enterChatRoom
type ChatRoom {
  chatRoomID: String!
  participants: [UserID!]!
  sendBirdParticipants: [UserID!]!
  sendBirdChannelURL: String
  pushConfig: PushConfig
}
type PushConfig {
  snoozeUntil: String
  allowPush: Boolean
}
input EnterChatRoomInput {
  chatRoomID: String
  participants: [UserID!]
}
type EnterChatRoomResponseSuccess {
  chatRoom: ChatRoom!
  isNew: Boolean!
}
union EnterChatRoomResponse =
    EnterChatRoomResponseSuccess
  | ResponseError


# --- list chat rooms
type ListChatRoomsResponseSuccess {
  chatRooms: [ChatRoom!]!
}
union ListChatRoomsResponse =
    ListChatRoomsResponseSuccess
  | ResponseError


# --- get story
input GetStoryInput {
  storyID: ID!
}
type GetStoryResponseSuccess {
  story: Story!
}
union GetStoryResponse =
    GetStoryResponseSuccess
  | ResponseError


# --- fetch story feed
input FetchStoryFeedInput {
  nonce: String
}
type FetchStoryFeedResponseSuccess {
  stories: [Story!]!
}
union FetchStoryFeedResponse =
    FetchStoryFeedResponseSuccess
  | ResponseError

# --- fetch recent notifications
input FetchRecentNotificationsInput {
  nonce: String
}
type NotificationGql {
  id: ID!
  title: String!
  description: String
  route: String
  thumbnail: String
  relatedChatRoomID: ID
  createdAt: DateString!
  markedRead: Boolean!
}
type FetchRecentNotificationsResponseSuccess {
  notifications: [NotificationGql!]!
}
union FetchRecentNotificationsResponse =
    FetchRecentNotificationsResponseSuccess
  | ResponseError

# --- list wishlist
input ListWishlistInput {
  userID: UserID
}
type ListWishlistResponseSuccess {
  wishlist: [Wish!]!
}
union ListWishlistResponse =
    ListWishlistResponseSuccess
  | ResponseError

# --- get wish
input GetWishInput {
  wishID: ID!
}
type GetWishResponseSuccess {
  wish: Wish!
}
union GetWishResponse =
    GetWishResponseSuccess
  | ResponseError

# --- check merchant status
input CheckMerchantStatusInput {
  getControlPanel: Boolean
}
type MerchantOnboardingStatusSummary {
  userID: ID!
  tradingWallet: ID!
  escrowWallet: ID!
  name: String!
  email: String!
  hasMerchantPrivilege: Boolean!
  stripeMerchantID: ID
  stripePortalUrl: String
  anythingDue: Boolean!
  anythingErrors: Boolean!
  capabilities: MerchantOnboardingStatusCapabilities!
}
type MerchantOnboardingStatusCapabilities {
  card_payments: String
  transfers: String
  charges_enabled: Boolean!
  payouts_enabled: Boolean!
}
type CheckMerchantStatusResponseSuccess {
  summary: MerchantOnboardingStatusSummary!
}
union CheckMerchantStatusResponse =
    CheckMerchantStatusResponseSuccess
  | ResponseError

# --- fetch swipe feed
input FetchSwipeFeedInput {
  nonce: String!
}
type SwipeStory {
  story: Story!
  wish: Wish
}
type FetchSwipeFeedResponseSuccess {
  swipeStack: [SwipeStory!]!
}
union FetchSwipeFeedResponse =
    FetchSwipeFeedResponseSuccess
  | ResponseError


# --- Queries
type Query {
  # profile
  getMyProfile: GetMyProfileResponse!
  checkUsernameAvailable(input: CheckUsernameAvailableInput!): CheckUsernameAvailableResponse!
  # friend
  viewPublicProfile(
    input: ViewPublicProfileInput!
  ): ViewPublicProfileResponse!
  listContacts(input: ListContactsInput!): ListContactsResponse!
  # chat 
  enterChatRoom(
    input: EnterChatRoomInput!
  ): EnterChatRoomResponse!
  listChatRooms: ListChatRoomsResponse!
  # story
  getStory(input: GetStoryInput!): GetStoryResponse!
  fetchStoryFeed(input: FetchStoryFeedInput!): FetchStoryFeedResponse!
  # notifications
  fetchRecentNotifications(input: FetchRecentNotificationsInput!): FetchRecentNotificationsResponse!
  # wishlist
  listWishlist(input: ListWishlistInput!): ListWishlistResponse!
  getWish(input: GetWishInput!): GetWishResponse!
  # merchant
  checkMerchantStatus(input: CheckMerchantStatusInput!): CheckMerchantStatusResponse!
  # swipe
  fetchSwipeFeed(input: FetchSwipeFeedInput!): FetchSwipeFeedResponse!
}

# --- modifyProfile
input ModifyProfileInput {
  displayName: String
  username: String
  bio: String
  avatar: String
  link: String
  privacyMode: PrivacyModeEnum
  themeColor: HexColorCode
  language: LanguageEnum
  gender: GenderEnum
  interestedIn: [GenderEnum!]
}
type ModifyProfileResponseSuccess {
  user: User!
}
union ModifyProfileResponse =
    ModifyProfileResponseSuccess
  | ResponseError

# --- update push token
input UpdatePushTokenInput {
  token: PushToken!
  active: Boolean!
  title: String
}
type UpdatePushTokenResponseSuccess {
  status: String!
}
union UpdatePushTokenResponse =
    UpdatePushTokenResponseSuccess
  | ResponseError


# --- revoke push tokens
type RevokePushTokensResponseSuccess {
  status: String!
}
union RevokePushTokensResponse =
    RevokePushTokensResponseSuccess
  | ResponseError

# --- send friend request
enum FriendshipStatus {
  ACQUAINTANCE
  SENT_REQUEST
  GOT_REQUEST
  ACCEPTED
  DECLINED
  BLOCKED
  NONE
}
input SendFriendRequestInput {
  recipientID: UserID!
  note: String
  utmAttribution: String
}
type SendFriendRequestResponseSuccess {
  status: FriendshipStatus!
}
union SendFriendRequestResponse =
    SendFriendRequestResponseSuccess
  | ResponseError


# --- handle friendship
enum FriendshipAction {
  ACCEPT_REQUEST
  DECLINE_REQUEST
  CANCEL_REQUEST
  BLOCK
  UNBLOCK
  REMOVE_FRIEND
}
input ManageFriendshipInput {
  friendID: UserID!
  action: FriendshipAction!
}
type ManageFriendshipResponseSuccess {
  status: FriendshipStatus!
}
union ManageFriendshipResponse =
    ManageFriendshipResponseSuccess
  | ResponseError


# --- update chat settings
input UpdateChatSettingsInput {
  chatRoomID: String!
  allowPush: Boolean
  snoozeUntil: String
}
type UpdateChatSettingsResponseSuccess {
  chatRoom: ChatRoom!
}
union UpdateChatSettingsResponse =
    UpdateChatSettingsResponseSuccess
  | ResponseError


# --- create story
enum StoryAttachmentType {
  IMAGE
  VIDEO
}
type StoryAttachment {
  id: ID!
  userID: UserID!
  type: StoryAttachmentType!
  url: String!
  thumbnail: String
  stream: String
  altText: String
}
type Story {
  id: ID!
  userID: UserID!
  caption: String
  attachments: [StoryAttachment!]!
  pinned: Boolean
  showcase: Boolean
  thumbnail: String!
  showcaseThumbnail: String
  # visibleAudienceGroups: AudienceGroupID[]
  # visibleFriends: UserID[]
  # visibleHashtags: StoryHashtag[]
  # hiddenUsers: UserID[]
  # mentionedUsers: UserID[]
  # mentionedWishlists: StickerID[]
  # location?: StoryLocation
  outboundLink: String
  createdAt: DateString
  expiresAt: DateString
  author: StoryAuthor!
  linkedWishID: String
}
type StoryAuthor {
  id: UserID!
  username: String!
  avatar: String!
  displayName: String!
}
input CreateStoryInput {
  caption: String!
  media: StoryMediaAttachmentInput
  linkedWishID: String
  allowSwipe: Boolean
  # link: String
  # outboundLink: String
}
input StoryMediaAttachmentInput {
  url: String!
  type: StoryAttachmentType!
  assetID: String!
}
type CreateStoryResponseSuccess {
  story: Story!
}
union CreateStoryResponse =
    CreateStoryResponseSuccess
  | ResponseError


# --- modify story
input ModifyStoryInput {
  storyID: ID!
  pinned: Boolean
  showcase: Boolean
  previewable: Boolean
}
type ModifyStoryResponseSuccess {
  story: Story!
}
union ModifyStoryResponse =
    ModifyStoryResponseSuccess
  | ResponseError

# --- mark notifications as read/unread
input MarkNotificationsAsReadInput {
  read: [ID!]!
  unread: [ID!]!
}
type MarkNotificationsAsReadResponseSuccess {
  notifications: [NotificationGql!]!
}
union MarkNotificationsAsReadResponse =
    MarkNotificationsAsReadResponseSuccess
  | ResponseError

# --- create wishlist item (sticker)
type MediaSet {
  small: String!
  medium: String!
  large: String
}
enum WishBuyFrequency {
  ONE_TIME
  MONTHLY
  WEEKLY 
  DAILY
}
enum WishlistVisibility {
  PUBLIC_MARKETPLACE
  FRIENDS_ONLY
  HIDDEN
}
enum WishTypeEnum {
  EVENT
  GIFT
}
type Wish {
  id: ID!
  creatorID: ID!
  wishTitle: String!
  stickerTitle: String!
  description: String!
  thumbnail: String!
  cookiePrice: Int!
  galleryMediaSet: [MediaSet!]!
  stickerMediaSet: MediaSet!
  isFavorite: Boolean!
  createdAt: DateString!
  author: WishAuthor
  buyFrequency: WishBuyFrequency!
  visibility: WishlistVisibility!
  wishType: WishTypeEnum!
  countdownDate: DateString
  externalURL: String
}
type WishAuthor {
  id: UserID!
  username: String!
  avatar: String!
  displayName: String!
}
input CreateWishInput {
  wishTitle: String!
  stickerTitle: String
  description: String
  cookiePrice: Int!
  wishGraphics: [String!]
  stickerGraphic: String
  isFavorite: Boolean
  buyFrequency: WishBuyFrequency
  visibility: WishlistVisibility
  wishType: WishTypeEnum!
  countdownDate: DateString
  externalURL: String
}
type CreateWishResponseSuccess {
  wish: Wish!
}
union CreateWishResponse =
    CreateWishResponseSuccess
  | ResponseError


# --- update wish
input UpdateWishInput {
  wishID: ID!
  wishTitle: String
  stickerTitle: String
  description: String
  cookiePrice: Int
  wishGraphics: [String!]
  stickerGraphic: String
  isFavorite: Boolean
  buyFrequency: WishBuyFrequency
  visibility: WishlistVisibility
  wishType: WishTypeEnum
  countdownDate: DateString
  externalURL: String
}
type UpdateWishResponseSuccess {
  wish: Wish!
}
union UpdateWishResponse =
    UpdateWishResponseSuccess
  | ResponseError

# --- request merchant onboarding
type RequestMerchantOnboardingResponseSuccess {
  registrationUrl: String!
}
union RequestMerchantOnboardingResponse =
    RequestMerchantOnboardingResponseSuccess
  | ResponseError

# --- create setup intent
type CreateSetupIntentResponseSuccess {
  clientSecret: String!
}
union CreateSetupIntentResponse =
    CreateSetupIntentResponseSuccess
  | ResponseError

# --- save payment method
input SavePaymentMethodInput {
  paymentMethodID: String!
  email: String
}
type SavePaymentMethodResponseSuccess {
  paymentMethodID: String!
}
union SavePaymentMethodResponse =
    SavePaymentMethodResponseSuccess
  | ResponseError


# --- create payment intent
input CreatePaymentIntentInput {
  wishSuggest: WishSuggest!
  note: String
  attribution: String
  promoCode: String
}
input WishSuggest {
  wishID: ID!
  suggestedAmount: Int
  suggestedFrequency: WishBuyFrequency
}
type CreatePaymentIntentResponseSuccess {
  checkoutToken: String
  referenceID: String!
  purchaseManifestID: String!
}
union CreatePaymentIntentResponse =
    CreatePaymentIntentResponseSuccess
  | ResponseError

# --- send transfer
input SendTransferInput {
  recipientID: UserID!
  amount: Int!
  note: String
}
type SendTransferResponseSuccess {
  referenceID: String!
}
union SendTransferResponse =
    SendTransferResponseSuccess
  | ResponseError

# --- recall transaction
input RecallTransactionInput {
  txMirrorID: String!
  recallerNote: String
}
type RecallTransactionResponseSuccess {
  referenceID: String!
}
union RecallTransactionResponse =
    RecallTransactionResponseSuccess
  | ResponseError

# --- cancel subscription
input CancelSubscriptionInput {
  purchaseManifestID: String!
}
type CancelSubscriptionResponseSuccess {
  status: String!
}
union CancelSubscriptionResponse =
    CancelSubscriptionResponseSuccess
  | ResponseError

# --- top up wallet
input TopUpWalletInput {
  amount: Int!
  promoCode: String
}
type TopUpWalletResponseSuccess {
  checkoutToken: String
  referenceID: String!
  purchaseManifestID: String!
}
union TopUpWalletResponse =
    TopUpWalletResponseSuccess
  | ResponseError

# --- interact with story
input InteractStoryInput {
  storyID: ID!
  viewed: String
  swipeLike: String
  swipeDislike: String
}
type InteractStoryResponseSuccess {
  status: String!
}
union InteractStoryResponse =
    InteractStoryResponseSuccess
  | ResponseError


# --- Mutations
type Mutation {
  # profile
  modifyProfile(input: ModifyProfileInput!): ModifyProfileResponse!
  updatePushToken(input: UpdatePushTokenInput!): UpdatePushTokenResponse!
  revokePushTokens: RevokePushTokensResponse!
  markNotificationsAsRead(input: MarkNotificationsAsReadInput!): MarkNotificationsAsReadResponse!
  # friends
  sendFriendRequest(input: SendFriendRequestInput!): SendFriendRequestResponse!
  manageFriendship(input: ManageFriendshipInput!): ManageFriendshipResponse!
  # chat
  updateChatSettings(input: UpdateChatSettingsInput!): UpdateChatSettingsResponse!
  # story
  createStory(input: CreateStoryInput!): CreateStoryResponse!
  modifyStory(input: ModifyStoryInput!): ModifyStoryResponse!
  interactStory(input: InteractStoryInput!): InteractStoryResponse!
  # wishlist
  createWish(input: CreateWishInput!): CreateWishResponse!
  updateWish(input: UpdateWishInput!): UpdateWishResponse!
  # merchant
  requestMerchantOnboarding: RequestMerchantOnboardingResponse!
  # shopping
  createSetupIntent: CreateSetupIntentResponse!
  savePaymentMethod(input: SavePaymentMethodInput!): SavePaymentMethodResponse!
  createPaymentIntent(input: CreatePaymentIntentInput!): CreatePaymentIntentResponse!
  topUpWallet(input: TopUpWalletInput!): TopUpWalletResponse!
  # money transfer
  sendTransfer(input: SendTransferInput!): SendTransferResponse!
  recallTransaction(input: RecallTransactionInput!): RecallTransactionResponse!
  # cashOutTransaction(input: CashOutTransactionInput!): CashOutTransactionResponse!
  cancelSubscription(input: CancelSubscriptionInput!): CancelSubscriptionResponse!
}


# --- template
# input TemplateInput {
#   userID: UserID!
# }
# type TemplateResponseSuccess {
#   statusCode: String!
# }
# union TemplateResponse =
#     SendFriendRequestResponseSuccess
#   | ResponseError
