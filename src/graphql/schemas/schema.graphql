
type User {
  id: UserID!
  email: String!
  username: String!
  phone: String
  displayName: String!
  bio: String!
  avatar: String!
  link: String!
  disabled: Boolean!
  isPaidChat: Boolean!
  isCreator: Boolean!
  createdAt: DateString!
}

# --- getMyProfile
type GetMyProfileResponseSuccess {
  user: User!
}
union GetMyProfileResponse =
    GetMyProfileResponseSuccess
  | ResponseError

# --- checkUsernameAvailable
input CheckUsernameAvailableInput {
  username: String!
}
type CheckUsernameAvailableResponseSuccess {
  isAvailable: Boolean!
}
union CheckUsernameAvailableResponse =
    CheckUsernameAvailableResponseSuccess
  | ResponseError

type Query {
  getMyProfile: GetMyProfileResponse!
  checkUsernameAvailable(input: CheckUsernameAvailableInput!): CheckUsernameAvailableResponse!
}

# type Mutation {
  # createGroupChat(input: CreateGroupChatInput!): CreateGroupChatResponse!
  # sendFriendRequest
  # joinGroupChat
  # leaveGroupChat
  # respondFriendRequest
  # modifyFriendship
# }


# --- template
# input TemplateInput {
#   userID: UserID!
# }
# type TemplateResponseSuccess {
#   statusCode: String!
# }
# union TemplateResponse =
#     SendFriendRequestResponseSuccess
#   | ResponseError
